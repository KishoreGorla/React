1. What is Virtual DOM.
 
Virtual DOM is a technique and set of libraries/algorithms that allow us to 
improve front end performance by avoiding direct work with 
DOM and work only with a lightweight JavaScript object that ...
A virtual DOM is a lightweight JavaScript representation of the Document Object Model (DOM) 
used in declarative web frameworks such as React, Vue.js, and Elm. 
Updating the virtual DOM is comparatively faster than updating the actual DOM (via js). 
Thus, the framework is free to make unnecessary changes to the virtual DOM relatively cheaply. 
The framework then finds the differences between the previ..

2. What is React Lifecycle 

A lifecycle in React can be thought of in 
three different phases: mounting, updating, and unmounting. 
Mounting occurs when the React component renders to the DOM (Document Object Model). 
When changes are made to that component, 
it enters the updating phase.
So we can say that the developer will be able to produce a quality 
application with the help of lifecycle methods and it also helps 
developers to make sure to plan what and how to do it at different points of birth, growth, 
or death of user interfaces.

The various lifecycle methods are:

constructor(): This method will be called when the component is initiated before anything has been done. 
It helps to set up the initial state and initial values.
getDerivedStateFromProps(): This method will be called just before element(s) rendering in the DOM. 
It helps to set up the state object depending on the initial props. 
The getDerivedStateFromProps() method will have a state as an argument and it returns an object that made changes to the state. 
This will be the first method to be called on an updating of a component.
render(): This method will output or re-render the HTML to the DOM with new changes. 
The render() method is an essential method and will be called always while the remaining methods are optional and will be called only if they are defined.
componentDidMount(): This method will be called after the rendering of the component. 
Using this method, you can run statements that need the component to be already kept in the DOM.
shouldComponentUpdate(): The Boolean value will be returned by this method which will specify whether React should proceed further with the rendering or not. The default value for this method will be True.
getSnapshotBeforeUpdate(): This method will provide access for the props as well as for the state before the update. 
It is possible to check the previously present value before the update, even after the update.
componentDidUpdate(): This method will be called after the component has been updated in the DOM.
componentWillUnmount(): This method will be called when the component removal from the DOM is about to happen.



3. What are hooks and their type? 

 hook is an opening statement (which is usually the first sentence) in an essay 
that attempts to grab the reader’s attention so that they want to read on. 
It can be done by using a few different types of hooks, which are a question, quote, statistic, or anecdote. 
React Hooks must be called only at the top level. 
It is not allowed to call them inside the nested functions, loops, or conditions.
It is allowed to call the Hooks only from the React Function Components

React Hooks are the built-in functions that permit developers for using the state and 
lifecycle methods within React components. These are newly added features made available in React 16.8 version. 
Each lifecycle of a component is having 3 phases which include mount, unmount, and update. 
Along with that, components have properties and states. Hooks will allow using these methods 
by developers for improving the reuse of code with higher flexibility navigating the component tree.



4. What is prop in react 

Props stand for "Properties." They are read-only components. 
It is an object which stores the value of attributes of a tag and work similar to the HTML attributes. 
It gives a way to pass data from one component to other components. 
It is similar to function arguments. 
Props are passed to the component in the same way as arguments passed in a function.

Props are immutable so we cannot modify the props from inside the component. 
Inside the components, we can add attributes called props. 
These attributes are available in the component as this.
props and can be used to render dynamic data in our render method.

When you need immutable data in the component, 
you have to add props to reactDom.render() method in the main.js file of your 
ReactJS project and used it inside the component in which you need.

React props are not being passed in Components. 
Sometimes you run into the problem that your React props are not being passed. ...
React props key is undefined. 
When rendering lists in React,you have to use a key prop identifying the element in the list. ...
Pass props to Styled Components. Did you hear about styled components? ...
Pass props with React Router. .
React Props are like function arguments in JavaScript and attributes in HTML.

To send props into a component,
React is a component-based library that divides the UI into little reusable pieces. 
In some cases, those components need to communicate 
(send data to each other) and the way to pass data between components is by using props.



5. What is React? 

React is a JavaScript library that is used to build web user interfaces and components. 
In other words, React is used to build the front end of websites that includes web pages, their layouts, and content. 
A typical website has a frontend and backend.
React is a JavaScript library created by Facebook

React is a User Interface (UI) library

React is a tool for building UI components
eact is a JavaScript library for creating user interfaces. 
Here are three places you'll find it being used: Web development. 
This is where React got its start and where you'll find it used



6. What is map in JavaScript? 
The JavaScript Map object is used to map keys to values. 
It stores each element as key-value pair. It operates the elements such as search, 
update and delete on the basis of specified key.



7. How to change the embedded server in spring boot?
 
By default, the Spring Boot framework uses 
Tomcat as the embedded server of choice. However, 
you could override this default setting by specifying certain configuration settings. 
For instance, if you want to use a Jetty dependency instead, then use an element in the XML configuration file, 
and specify a element as well:
we created a web-based Spring Boot application that uses 
Embedded Tomcat as the default server running on the default port, 8080. 
Spring Boot supports Tomcat, Undertow, and Jetty as embedded servers. 
Now, we will change and/or configure the default embedded server and common properties to all the available servers.

Spring Boot provides a convenient way of configuring dependencies with its starters. 
For changing the embedded server, we will user its spring-boot-starter-undertow

8. What is HashMap? 

HashMap is a collection class in Java. You can use it to store key and value pairs. 
Its performance depends on the initial capacity and the load factor.
ashMap is a collection class in Java. 
You can use it to store key and value pairs. 
Its performance depends on the initial capacity and the load factor. 
HashMap has various methods that allow you to use its hash table data structure. 

HashMap is similar to the Hashtable class. 
The difference between the two is that HashMap is unsynchronized while Hashtable isn’t. 
Also, unlike Hashtable, 
HashMap allows null values and the null key. 
Since HashMap isn’t an ordered collection, 
it doesn’t return the keys and values in the order you insert them. 
Also, HashMap doesn’t sort the stored keys and values. If you want to use the HashMap class and its methods, 
you’ll have to import java.util.HashMap (or its superclass).
You can use duplicate values, but HashMap doesn’t allow duplicate keys. 
It means one key can’t have multiple values, but multiple keys can have a single value. 
You can use null keys only once, but you can use various null values. 
HashMap provides no guarantees regarding the map’s order. 
So, it doesn’t guarantee if the order will remain constant. 
HashMap is very similar to Hashtable, with the only difference being that HashMap is unsynchronized. 
HashMap implements a Serializable and Cloneable interface. 





8. What is HashMap? 

HashMap is a collection class in Java. You can use it to store key and value pairs. 
Its performance depends on the initial capacity and the load factor.
ashMap is a collection class in Java. 
You can use it to store key and value pairs. 
Its performance depends on the initial capacity and the load factor. 
HashMap has various methods that allow you to use its hash table data structure. 

HashMap is similar to the Hashtable class. 
The difference between the two is that HashMap is unsynchronized while Hashtable isn’t. 
Also, unlike Hashtable, 
HashMap allows null values and the null key. 
Since HashMap isn’t an ordered collection, 
it doesn’t return the keys and values in the order you insert them. 
Also, HashMap doesn’t sort the stored keys and values. If you want to use the HashMap class and its methods, 
you’ll have to import java.util.HashMap (or its superclass).
You can use duplicate values, but HashMap doesn’t allow duplicate keys. 
It means one key can’t have multiple values, but multiple keys can have a single value. 
You can use null keys only once, but you can use various null values. 
HashMap provides no guarantees regarding the map’s order. 
So, it doesn’t guarantee if the order will remain constant. 
HashMap is very similar to Hashtable, with the only difference being that HashMap is unsynchronized. 
HashMap implements a Serializable and Cloneable interface. 

9. What are JSX, Call back Function?  
JSX stands for JavaScript XML.

JSX allows us to write HTML in React.

JSX makes it easier to write and add HTML in React.
JSX allows us to write HTML elements in JavaScript and place them in the DOM without
 any createElement()  and/or appendChild() methods.

Using JSX, you may write succinct HTML/XML-like structures 
(e.g., DOM-like tree structures) in the same file as JavaScript code, 
and Babel will convert these expressions into actual JavaScript code. 
Instead of putting JavaScript into HTML as in the past, 
JSX allows us to put HTML into JavaScript.

A callback function is a function that is passed as an argument to another function, 
to be “called back” at a later time. 
A function that accepts other functions as arguments is called a higher-order function, 
which contains the logic for when the callback function gets executed. 
It’s the combination of these two that allow us to extend our functionality.
JavaScript runs code sequentially in top-down order. However, 
there are some cases that code runs (or must run) after something else happens and also not sequentially. 
This is called asynchronous programming.

11. What is MongoDB? 
MongoDB is a document database used to build highly available and scalable internet applications. 
With its flexible schema approach, it’s popular with development teams using agile methodologies. 
Offering drivers for all major programming languages, 
MongoDB allows you to immediately start building your application without spending time configuring a database. 

Instead of storing data in tables of rows or columns like SQL databases, each record in a 
MongoDB database is a document described in BSON, a binary representation of the data. 
Applications can then retrieve this information in a JSON format.

12. What is State hook 

The state hook provides a $set function to update the state. 
The function accepts a partial state object so we don't need to provide all properties.

The React useState Hook allows us to track state in a function component.

State generally refers to data or properties that need to be tracking in an application.

To use the useState Hook, we first need to import it into our component.

At the top of your component, import the useState Hook.

import { useState } from "react";
useState is a Hook that lets you add React state to function components. 
In a function component, we have no this, 
so we can’t assign or read this.state. Instead, we call the useState Hook directly inside our component:

import React, { useState } from 'react';

function Example() {
  // Declare a new state variable, which we'll call "count"
  const [count, setCount] = useState(0);

13. What is the output of console.log(a) statement  
The console.log () method outputs a message to the web console. 
The message may be a single string (with optional substitution values), 
or it may be any one or more JavaScript objects. Note: This feature is available in Web Workers

14. What are Error boundaries

Error boundaries work like a JavaScript catch {} block, but for components. 
Only class components can be error boundaries. 
In practice, most of the time you’ll want to declare an error boundary component 
once and use it throughout your application. 
Note that error boundaries only catch errors in the components below them in the tree.  
Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, 
log those errors, 
and display a fallback UI instead of the component tree that crashed. 
Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, 
log those errors, and display a fallback UI instead of the component tree 


15. write code to create button in functional component?

import React from 'react';



const Button = () => {

    return (

        <button className="button">Generate Countdown </button>

    )

}



export default Button;


17. What are methods in React?  

React has four built-in methods that gets called, in this order, when mounting a component: 
constructor () getDerivedStateFromProps () render () componentDidMount ()



18. Explain static and dynamic overloading.  

Overloaded methods are resolved (deciding which method to be called when there are multiple methods with the same name) 
using static binding while overridden methods use dynamic binding, i.e, at run time. 
Static Binding The binding which can be resolved at compile time by the compiler is known as static or early binding.

 Static Binding                                             
It takes place at compile time for                       
which is referred to as early binding
It uses overloading more precisely operator overloading method
It takes place using normal functions 
Real objects never use static binding


Dynamic Binding
It takes place at runtime so do it is referred to as late binding.  
It uses overriding methods.
It takes place using virtual function   
Real objects use dynamic binding.


19. What UseState and UseEffect do?
 

To put it simply, both useState and useEffect enhance functional 
components to make them do things that classes can but functional components (without hooks) cannot: 
useState allows functional components to have state, 
like this.state in class components.


Corsair CX450 Unboxing And Model Differences (RPS0053 vs RPS0063).
To put it simply, both useState and useEffect enhance functional components 
to make them do things that classes can but functional components (without hooks) cannot:

useState allows functional components to have state, like this.state in class components.
useEffect allows functional components to have lifecycle methods 
(such as componentDidMount, componentDidUpdate and componentWillUnmount) in one single API.

useState() hook in React is a hook that allows us to state variables in our functional components.

React has two types of components. 
The first one is class components which are ES6 classes that extend from the React, 
and the second one is functional components. 
Class-to-components will have state and lifecycle methods: the message class extends React. 
useState Hook is a special function which takes the 
initial state as the arguments and returns it as an input array.
Syntax: The first element is the initial state, and the second one is a function used to update the state.

const [state, setState] = useState(initialState)  


The useEffect Hook allows you to perform side effects in your components.

Some examples of side effects are: fetching data, directly updating the DOM, and timers.

useEffect accepts two arguments. The second argument is optional.

useEffect(<function>, <dependency>)

useEffect runs on every render. That means that when the count changes, a render happens, which then triggers another effect.

This is not what we want. There are several ways to control when side effects run.


20. How many times can we use USeEffect? 

our useEffect is executed only once per render cycle, 
but you have several state updates in your useEffect which cause a re-render. Hence you get a lot of alerts. 
See a demo of your code and see the console.logs as well as comments

he React hook useEffect helps in adding componentDidUpdate and componentDidMount combined lifecycle in React’s functional component.

So far we know we can add lifecycle methods in stateful component only.

 we run it, we will see the console log and alert on every render cycle. 
Here we can call http requests also inside useEffect. 
Now this is similar to componentDidUpdate lifecycle of stateful component.

We can add multiple useEffect functions in a single component.


21. Where we can use Virtual Dom? 

A virtual DOM is a lightweight JavaScript representation of the Document Object Model (DOM) used in declarative 
web frameworks such as React, Vue.js, and Elm. 
Updating the virtual DOM is comparatively faster than updating the actual DOM (via js). 
Thus, the framework is free to make unnecessary changes to the virtual DOM relatively cheaply.

Virtual DOM is a technique and set of libraries/algorithms 
that allow us to improve front end performance by avoiding direct work with DOM and 
work only with a lightweight JavaScript object that ...

As a front-end developer, you might have had to manipulate Document Object Model(DOM) when you build your application. 
The problem is: the bigger your app grows, the more complicated you have to deal with DOM management. 

Recently, frameworks or libraries based on javascript are growing rapidly in order to 
help developers resolve this issue.
\

22. ES6 Function? 

Functions are the building blocks of readable, maintainable, and reusable code. 
Functions are defined using the function keyword. 
Following is the syntax for defining a standard function.

function function_name() {
// function body
}
To force execution of the function, it must be called. 
This is called as function invocation. Following is the syntax to invoke a function.

A function is the set of input statements, which performs specific computations and produces output. 
It is a block of code that is designed for performing a particular task. 
It is executed when it gets invoked (or called). Functions allow us to reuse and write the code in an organized way. 
Functions in JavaScript are used to perform operations.

In JavaScript, functions are defined by using function keyword followed by a name and parentheses (). 
The function name may include digits, letters, dollar sign, and underscore. 
The brackets in the function name may consist of the name of parameters separated by commas. 
The body of the function should be placed within curly braces {}.

The syntax for defining a standard function is as follows:

function function_name() {  
    //body of the function  
}   





23.Error vs Exception Difference? 
		Errors							Exceptions
1.The error indicates trouble that primarily
occurs due to the scarcity of system resources. 1.The exceptions are the issues that can appear at runtime and compile time.
2.It is not possible to recover from an error. 	2.It is possible to recover from an exception.
3.In java, all the errors are unchecked.	3.In java, the exceptions can be both checked and unchecked.
4.The system in which the program 
is running is responsible for errors.	        4.The code of the program is accountable for exceptions.
5.They are described in the 
java.lang.Error package.			5.They are described in java.lang.Exception package

24. How can we find the prime no.?  
By the definition of a prime number, we know that the prime numbers have only two 
factors present in it. The two factors would be 1 and the original number itself. 
Hence, we need to find here the numbers which consist of only two factors. This is 
possible by using a simple method, which is called prime factorisation.

25. Which methods can we use to pick the element randomly from the arraylist?  
ArrayList is a part of collection framework and is present in java.util package. 
It provides us with dynamic arrays in Java.
Generating random numbers from the list have a good utility value 
There are various methods to get a random element from the ArrayList:
Using Math.random()
Using ArrayList Shuffle
Using Random class

26. OOPs Concept explain 
Object-oriented programming is a model that provides different types of concepts, 
such as inheritance, abstraction, polymorphism, etc. These concepts aim to implement 
real-world entities in programs. They create working methods and variables to reuse 
them without compromising security.
List of OOPs Concepts in Java
Objects
Classes
Object 
Class
Abstraction
Inheritance 
Polymorphism
Encapsulation

What are Objects?
Objects are always called instances of a class which are created from class in java
or any other language. They have states and behaviour.
What are Classes?
Classes are like object constructors for creating objects. The collection of objects
is said to be a class. Classes are said to be logical quantities. Classes don’t 
consume any space in the memory.
What is Abstraction?  
Abstraction is a process which displays only the information needed and hides the 
unnecessary information. We can say that the main purpose of abstraction is data 
hiding. Abstraction means selecting data from a large number of data to show the 
information needed, which helps in reducing programming complexity and efforts.
What is Inheritance?
Inheritance is a method in which one object acquires/inherits another object’s 
properties, and inheritance also supports hierarchical classification. The idea 
behind this is that we can create new classes built on existing classes, i.e., when 
you inherit from an existing class, we can reuse methods and fields of the parent 
class.  
What is Polymorphism?
Polymorphism refers to many forms, or it is a process that performs a single action
in different ways. It occurs when we have many classes related to each other by 
inheritance. Polymorphism is of two different types, i.e., compile-time polymorphism
and runtime polymorphism. One of the examples in Compile time polymorphism is that 
when we overload a static method in java. Run time polymorphism is also called a 
dynamic method dispatch is a method in which a call to an overridden method is 
resolved at run time rather than compile time.
What is Encapsulation?
Encapsulation is one of the concepts in OOPs concepts; it is the process that binds 
together the data and code into a single unit and keeps both from being safe from 
outside interference and misuse. In this process, the data is hidden from other 
classes and can be accessed only through the current class’s methods.

27. What is spring? 
The Spring Framework (Spring) is an open-source application framework that provides 
infrastructure support for developing Java applications. One of the most popular 
Java Enterprise Edition (Java EE) frameworks, Spring helps developers create high 
performing applications using plain old Java objects (POJOs).

28. What are Props and State? 
	PROPS								STATE

1.The Data is passed from one component to another.	1.The Data is passed within the component only.
2.It is Immutable (cannot be modified).			2.It is Mutable ( can be modified).
3.Props can be used with state and functional 
components.					        3.State can be used only with the state components/class component (Before 16.0).
4.Props are read-only.					4.State is both read and write.

29. Difference Between Interface and Abstract Class 
	Abstract class							Interface
1) Abstract class can have abstract and non-abstract methods.	1.Interface can have only abstract methods. Since Java 8, it can have default and static methods also.
2) Abstract class doesn't support multiple inheritance.		2.Interface supports multiple inheritance.
3) Abstract class can have final, non-final, static and 
non-static variables.						3.Interface has only static and final variables.
4) Abstract class can provide the implementation of interface.	4.Interface can't provide the implementation of abstract class.
5) The abstract keyword is used to declare abstract class.	5.The interface keyword is used to declare interface.







30. What is Event Handling and write code for the Onclick Event? 
<button onclick="myFunction()">Click me</button>

31. Difference between final, finally and finalize? 
The final, finally, and finalize are keywords in Java that are used in exception 
handling. Each of these keywords has a different functionality. The basic difference
between final, finally and finalize is that the final is an access modifier, finally
is the block in Exception Handling and finalize is the method of object class.

32. What is Map() in java 
A Map is an object that maps keys to values. A map cannot contain duplicate keys: 
Each key can map to at most one value. It models the mathematical function abstraction.

33. Types of Polymorphism 
There are two types of polymorphism in Java: compile-time polymorphism and runtime 
polymorphism. We can perform polymorphism in java by method overloading and method 
overriding.
34. Working of crud operation? 
CRUD Meaning: CRUD is an acronym that comes from the world of computer programming 
and refers to the four functions that are considered necessary to implement a 
persistent storage application: create, read, update and delete. 



35. Reverse the String 
import java.io.*;
import java.util.Scanner;
 
class GFG {
    public static void main (String[] args) {
       
        String str= "Geeks", nstr="";
        char ch;
       
      System.out.print("Original word: ");
      System.out.println("Geeks"); //Example word
       
      for (int i=0; i<str.length(); i++)
      {
        ch= str.charAt(i); //extracts each character
        nstr= ch+nstr; //adds each character in front of the existing string
      }
      System.out.println("Reversed word: "+ nstr);
    }
}


36. Syntax of UseEffect and Coding question using UseEffect (call a mock service 
get the data (array of objects), update this variable by adding another object and 
call another service only after the variable is updated) 
function BooksList () {
   const [books, updateBooks] = React.useState([]);
   
   React.useEffect(function effectFunction() {
       if (books) {
           updateBooks([...books, { name: 'A new Book', id: '...'}]);
       }
   }, []); // This empty array represents an empty list of dependencies
   ...
}

function BooksList () {
   const [books, updateBooks] = React.useState([]);
   const [counter, updateCounter] = React.useState(0);
   
   React.useEffect(function effectFunction() {
       if (books) {
           updateBooks([...books, { name: 'A new Book', id: '...'}]);
       }
   }, [counter]);
   
   const incrementCounter = () => {
       updateCounter(counter + 1);
   }
   ...
}





38. What is an actuator? 
An actuator is a device that produces a motion by converting energy and signals 
going into the system. The motion it produces can be either rotary or linear. An 
actuator is a device that produces a motion by converting energy and signals going 
into the system.

39. What is the promise in JavaScript? 
The Promise object represents the eventual completion (or failure) of an 
asynchronous operation and its resulting value



41. What is hoisting? 
JavaScript Hoisting refers to the process whereby the interpreter appears to move
the declaration of functions, variables or classes to the top of their scope, prior 
to execution of the code.




