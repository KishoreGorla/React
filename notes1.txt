What are synthetic events in React?
A synthetic event is an object which acts as a cross-browser wrapper around the 
browser's native event. It combines the behavior of different browser's native event
into one API, including stopPropagation() and preventDefault().

Explain the Lists in React.
Lists are used to display data in an ordered format. In React, Lists can be created 
in a similar way as we create it in JavaScript. We can traverse the elements of the 
list using the map() function.

What is the significance of keys in React?
A key is a unique identifier. In React, it is used to identify which items have changed,
updated, or deleted from the Lists. It is useful when we dynamically created components
or when the users alter the lists. It also helps to determine which components in a 
collection needs to be re-rendered instead of re-rendering the entire set of components
every time. It increases application performance.

How are forms created in React?
Forms allow the users to interact with the application as well as gather information 
from the users. Forms can perform many tasks such as user authentication, adding user
searching, filtering, etc. A form can contain text fields, buttons, checkbox, radio 
button, etc.

What are the different phases of React component's lifecycle?
The different phases of React component's lifecycle are:
Initial Phase: It is the birth phase of the React lifecycle when the component starts
its journey on a way to the DOM. In this phase, a component contains the default 
Props and initial State. These default properties are done in the constructor of a 
component.
Mounting Phase: In this phase, the instance of a component is created and added into 
the DOM.
Updating Phase: It is the next phase of the React lifecycle. In this phase, we get 
new Props and change State. This phase can potentially update and re-render only when
a prop or state change occurs. The main aim of this phase is to ensure that the 
component is displaying the latest version of itself. This phase repeats again and 
again.
Unmounting Phase: It is the final phase of the React lifecycle, where the component 
instance is destroyed and unmounted(removed) from the DOM.


What are Pure Components?
Pure components introduced in React 15.3 version. The React.Component and React.
PureComponent differ in the shouldComponentUpdate() React lifecycle method. This 
method decides the re-rendering of the component by returning a boolean value (true 
or false). In React.Component, shouldComponentUpdate() method returns true by default .



What are the lifecycle methods of React?
React lifecycle hooks will have the methods that will be automatically called at 
different phases in the component lifecycle and thus it provides good control over what happens at the invoked point. 
It provides the power to effectively control and manipulate what goes on throughout the component lifecycle.

For example, if you are developing the YouTube application, 
then the application will make use of a network for buffering the videos and 
it consumes the power of the battery (assume only these two). After playing the video 
if the user switches to any other application, then you should make sure that the resources 
like network and battery are being used most efficiently. You can stop or pause 
the video buffering which in turn stops the battery and network usage when the 
user switches to another application after video play.

So we can say that the developer will be able to produce a quality 
application with the help of lifecycle methods and it also helps 
developers to make sure to plan what and how to do it at different points of birth, growth, 
or death of user interfaces.
The various lifecycle methods are:

constructor(): This method will be called when the component is initiated before anything has been done. 
It helps to set up the initial state and initial values.
getDerivedStateFromProps(): This method will be called just before element(s) rendering in the DOM. 
It helps to set up the state object depending on the initial props. 
The getDerivedStateFromProps() method will have a state as an argument and it returns an object that made changes to the state. 
This will be the first method to be called on an updating of a component.
render(): This method will output or re-render the HTML to the DOM with new changes. 
The render() method is an essential method and will be called always while the remaining methods are optional and will be called only if they are defined.
componentDidMount(): This method will be called after the rendering of the component. 
Using this method, you can run statements that need the component to be already kept in the DOM.
shouldComponentUpdate(): The Boolean value will be returned by this method which will specify whether React should proceed further with the rendering or not. The default value for this method will be True.
getSnapshotBeforeUpdate(): This method will provide access for the props as well as for the state before the update. 
It is possible to check the previously present value before the update, even after the update.
componentDidUpdate(): This method will be called after the component has been updated in the DOM.
componentWillUnmount(): This method will be called when the component removal from the DOM is about to happen.

